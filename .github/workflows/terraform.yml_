name: "Syncing Cloudflare changes from local to Remote"

permissions:
  actions: write       # Necessary to cancel workflow executions
  checks: write        # Necessary to write reports
  pull-requests: write # Necessary to comment on PRs
  contents: read
  packages: write

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:

      - name: Set SCOPE variables
        run: |
          CLOUDFLARE_EMAIL="${{ secrets.CLOUDFLARE_EMAIL }}"
          echo "CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}" >> $GITHUB_ENV

          CLOUDFLARE_API_KEY="${{ secrets.CLOUDFLARE_API_KEY }}"
          echo "CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}" >> $GITHUB_ENV

          TF_CLOUD_ORGANIZATION="${{ secrets.TF_CLOUD_ORGANIZATION }}"
          echo "TF_CLOUD_ORGANIZATION=${TF_CLOUD_ORGANIZATION}" >> $GITHUB_ENV

          TF_WORKSPACE="${{ secrets.TF_WORKSPACE }}"
          echo "TF_WORKSPACE=${TF_WORKSPACE}" >> $GITHUB_ENV

          TERRAFORM_CONFIG_VARS="terraform.tfvars"
          echo "TERRAFORM_CONFIG_VARS=${TERRAFORM_CONFIG_VARS}" >> $GITHUB_ENV

          CF_TERRAFORMING_CONFIG=".cf-terraforming.yaml"
          echo "CF_TERRAFORMING_CONFIG=${CF_TERRAFORMING_CONFIG}" >> $GITHUB_ENV

          DIR_GENERATED="./generated"
          echo "DIR_GENERATED=${DIR_GENERATED}" >> $GITHUB_ENV

          DIR_IMPORT="./imported"
          echo "DIR_IMPORT=${DIR_IMPORT}" >> $GITHUB_ENV

          IMPORTS_SCRIPT="/workspace/import-terraform.sh"
          echo "IMPORTS_SCRIPT=${IMPORTS_SCRIPT}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        continue-on-error: false
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_USER_TOKEN }}
          clean: true
          sparse-checkout: |
            scripts
            terraform

      - name: Configure Terraform
        id: configure
        run: |
          source ./scripts/parts/functions.sh
          create_config_files "./terraform/terraform.tfvars" "./terraform/.cf-terraforming.yaml"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: List dir
        id: list-dir
        run: |
          ls -ail ./terraform

          echo "‚ú® ./terraform/${{ env.TERRAFORM_CONFIG_VARS }}"
          cat "./terraform/${{ env.TERRAFORM_CONFIG_VARS }}"

          echo "‚ú® ./terraform/${{ env.CF_TERRAFORMING_CONFIG }}"
          cat "./terraform/${{ env.CF_TERRAFORMING_CONFIG }}"

      # - uses: terraform-cache/terraform-cache@v1

      - name: Terraform Format
        id: fmt
        working-directory: terraform
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: terraform
        id: init
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        working-directory: terraform
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GH_USER_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        working-directory: terraform
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: terraform
        run: terraform apply -auto-approve -input=false
